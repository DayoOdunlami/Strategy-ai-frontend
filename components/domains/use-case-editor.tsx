"use client"

import { useState } from "react"
import { X, Plus, Sparkles, Tag } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Separator } from "@/components/ui/separator"

interface UseCase {
  id: string
  name: string
  description: string
  category: string
  color: string
  topics: string[]
  tags: string[]
  promptTemplates: any[]
  autoGeneratedTopics: string[]
  autoGeneratedTags: string[]
}

interface UseCaseEditorProps {
  domainId: string
  useCase: UseCase
  onClose: () => void
  onSave: (useCase: UseCase) => void
}

export function UseCaseEditor({ domainId, useCase, onClose, onSave }: UseCaseEditorProps) {
  const [editedUseCase, setEditedUseCase] = useState<UseCase>({ ...useCase })
  const [newTopic, setNewTopic] = useState("")
  const [newTag, setNewTag] = useState("")
  const [isGeneratingAI, setIsGeneratingAI] = useState(false)

  const categories = ["Operational", "Knowledge", "Assessment", "Analysis", "Strategic"]
  const colorOptions = [
    "bg-blue-50 text-blue-700 border-blue-100",
    "bg-green-50 text-green-700 border-green-100",
    "bg-orange-50 text-orange-700 border-orange-100",
    "bg-purple-50 text-purple-700 border-purple-100",
    "bg-cyan-50 text-cyan-700 border-cyan-100",
    "bg-pink-50 text-pink-700 border-pink-100",
  ]

  const addTopic = () => {
    if (newTopic.trim() && !editedUseCase.topics.includes(newTopic.trim())) {
      setEditedUseCase((prev) => ({
        ...prev,
        topics: [...prev.topics, newTopic.trim()],
      }))
      setNewTopic("")
    }
  }

  const removeTopic = (topicToRemove: string) => {
    setEditedUseCase((prev) => ({
      ...prev,
      topics: prev.topics.filter((topic) => topic !== topicToRemove),
    }))
  }

  const addTag = () => {
    if (newTag.trim() && !editedUseCase.tags.includes(newTag.trim())) {
      setEditedUseCase((prev) => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()],
      }))
      setNewTag("")
    }
  }

  const removeTag = (tagToRemove: string) => {
    setEditedUseCase((prev) => ({
      ...prev,
      tags: prev.tags.filter((tag) => tag !== tagToRemove),
    }))
  }

  const generateAISuggestions = async () => {
    setIsGeneratingAI(true)
    // Simulate AI generation
    setTimeout(() => {
      const newAITopics = ["Advanced Analytics", "Predictive Modeling", "Data Integration"]
      const newAITags = ["machine-learning", "predictive", "data-driven"]

      setEditedUseCase((prev) => ({
        ...prev,
        autoGeneratedTopics: [...new Set([...prev.autoGeneratedTopics, ...newAITopics])],
        autoGeneratedTags: [...new Set([...prev.autoGeneratedTags, ...newAITags])],
      }))
      setIsGeneratingAI(false)
    }, 2000)
  }

  const adoptAITopic = (topic: string) => {
    if (!editedUseCase.topics.includes(topic)) {
      setEditedUseCase((prev) => ({
        ...prev,
        topics: [...prev.topics, topic],
        autoGeneratedTopics: prev.autoGeneratedTopics.filter((t) => t !== topic),
      }))
    }
  }

  const adoptAITag = (tag: string) => {
    if (!editedUseCase.tags.includes(tag)) {
      setEditedUseCase((prev) => ({
        ...prev,
        tags: [...prev.tags, tag],
        autoGeneratedTags: prev.autoGeneratedTags.filter((t) => t !== tag),
      }))
    }
  }

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Edit Use Case: {useCase.name}</DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Basic Information */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Use Case Name</Label>
              <Input
                value={editedUseCase.name}
                onChange={(e) => setEditedUseCase((prev) => ({ ...prev, name: e.target.value }))}
              />
            </div>
            <div className="space-y-2">
              <Label>Category</Label>
              <select
                className="w-full p-2 border rounded-md"
                value={editedUseCase.category}
                onChange={(e) => setEditedUseCase((prev) => ({ ...prev, category: e.target.value }))}
              >
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="space-y-2">
            <Label>Description</Label>
            <Textarea
              value={editedUseCase.description}
              onChange={(e) => setEditedUseCase((prev) => ({ ...prev, description: e.target.value }))}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label>Color Theme</Label>
            <div className="flex flex-wrap gap-2">
              {colorOptions.map((color) => (
                <button
                  key={color}
                  className={`w-8 h-8 rounded-full border-2 ${color} ${
                    editedUseCase.color === color ? "border-primary" : "border-transparent"
                  }`}
                  onClick={() => setEditedUseCase((prev) => ({ ...prev, color }))}
                />
              ))}
            </div>
          </div>

          <Separator />

          {/* AI Suggestions Section */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <Sparkles className="h-5 w-5" />
                AI-Powered Suggestions
              </h3>
              <Button onClick={generateAISuggestions} disabled={isGeneratingAI} variant="outline">
                {isGeneratingAI ? "Generating..." : "Generate New Suggestions"}
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Topics Management */}
              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  Topics Management
                </h4>

                {/* Manual Topics */}
                <div>
                  <Label className="text-sm">Manual Topics</Label>
                  <div className="flex flex-wrap gap-1 mt-2 mb-2 min-h-[40px] p-2 border rounded-md">
                    {editedUseCase.topics.map((topic) => (
                      <Badge key={topic} variant="secondary" className="text-xs">
                        {topic}
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-4 w-4 ml-1 p-0"
                          onClick={() => removeTopic(topic)}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </Badge>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add topic..."
                      value={newTopic}
                      onChange={(e) => setNewTopic(e.target.value)}
                      onKeyDown={(e) => e.key === "Enter" && addTopic()}
                      className="text-sm"
                    />
                    <Button onClick={addTopic} size="sm">
                      <Plus className="h-3 w-3" />
                    </Button>
                  </div>
                </div>

                {/* AI-Generated Topics */}
                <div>
                  <Label className="text-sm">AI-Generated Suggestions</Label>
                  <div className="flex flex-wrap gap-1 mt-2 min-h-[40px] p-2 border rounded-md border-dashed">
                    {editedUseCase.autoGeneratedTopics.map((topic) => (
                      <Badge
                        key={topic}
                        variant="outline"
                        className="text-xs border-dashed cursor-pointer hover:bg-muted"
                        onClick={() => adoptAITopic(topic)}
                      >
                        {topic}
                        <Plus className="h-3 w-3 ml-1" />
                      </Badge>
                    ))}
                    {editedUseCase.autoGeneratedTopics.length === 0 && (
                      <span className="text-xs text-muted-foreground">No AI suggestions yet</span>
                    )}
                  </div>
                </div>
              </div>

              {/* Tags Management */}
              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  Tags Management
                </h4>

                {/* Manual Tags */}
                <div>
                  <Label className="text-sm">Manual Tags</Label>
                  <div className="flex flex-wrap gap-1 mt-2 mb-2 min-h-[40px] p-2 border rounded-md">
                    {editedUseCase.tags.map((tag) => (
                      <Badge key={tag} variant="secondary" className="text-xs">
                        #{tag}
                        <Button variant="ghost" size="icon" className="h-4 w-4 ml-1 p-0" onClick={() => removeTag(tag)}>
                          <X className="h-3 w-3" />
                        </Button>
                      </Badge>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add tag..."
                      value={newTag}
                      onChange={(e) => setNewTag(e.target.value)}
                      onKeyDown={(e) => e.key === "Enter" && addTag()}
                      className="text-sm"
                    />
                    <Button onClick={addTag} size="sm">
                      <Plus className="h-3 w-3" />
                    </Button>
                  </div>
                </div>

                {/* AI-Generated Tags */}
                <div>
                  <Label className="text-sm">AI-Generated Suggestions</Label>
                  <div className="flex flex-wrap gap-1 mt-2 min-h-[40px] p-2 border rounded-md border-dashed">
                    {editedUseCase.autoGeneratedTags.map((tag) => (
                      <Badge
                        key={tag}
                        variant="outline"
                        className="text-xs border-dashed cursor-pointer hover:bg-muted"
                        onClick={() => adoptAITag(tag)}
                      >
                        #{tag}
                        <Plus className="h-3 w-3 ml-1" />
                      </Badge>
                    ))}
                    {editedUseCase.autoGeneratedTags.length === 0 && (
                      <span className="text-xs text-muted-foreground">No AI suggestions yet</span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end gap-2 pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button onClick={() => onSave(editedUseCase)}>Save Changes</Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
