"use client"

import { useState } from "react"
import {
  ChevronDown,
  ChevronRight,
  Plus,
  Edit,
  Trash2,
  Globe,
  FileText,
  MessageSquare,
  Tag,
  Sparkles,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { UseCaseEditor } from "@/components/domains/use-case-editor"
import { PromptTemplateEditor } from "@/components/domains/prompt-template-editor"

interface Domain {
  id: string
  name: string
  description: string
  color: string
  useCases: UseCase[]
}

interface UseCase {
  id: string
  name: string
  description: string
  category: string
  color: string
  topics: string[]
  tags: string[]
  promptTemplates: PromptTemplate[]
  autoGeneratedTopics: string[]
  autoGeneratedTags: string[]
}

interface PromptTemplate {
  id: string
  name: string
  description: string
  template: string
  variables: string[]
}

interface HierarchicalDomainViewProps {
  expandedSections: Set<string>
  onToggleSection: (sectionId: string) => void
  allExpanded: boolean
}

export function HierarchicalDomainView({
  expandedSections,
  onToggleSection,
  allExpanded,
}: HierarchicalDomainViewProps) {
  const [domains, setDomains] = useState<Domain[]>([
    {
      id: "ai",
      name: "AI & Technology",
      description: "Artificial Intelligence, Machine Learning, and emerging technologies",
      color: "bg-blue-100 text-blue-800 border-blue-200",
      useCases: [
        {
          id: "ai-analysis",
          name: "AI Technology Analysis",
          description: "Analyze AI implementation strategies and technical feasibility",
          category: "Analysis",
          color: "bg-blue-50 text-blue-700 border-blue-100",
          topics: ["Machine Learning", "Neural Networks", "Computer Vision"],
          tags: ["implementation", "strategy", "technical"],
          autoGeneratedTopics: ["Deep Learning", "Natural Language Processing", "Automation"],
          autoGeneratedTags: ["ai-driven", "innovation", "scalability"],
          promptTemplates: [
            {
              id: "ai-tech-analysis",
              name: "AI Technology Assessment",
              description: "Comprehensive AI technology evaluation template",
              template:
                "Analyze the AI technology described in this document focusing on: 1) Technical feasibility and implementation complexity, 2) Required infrastructure and resources, 3) Potential risks and mitigation strategies, 4) Expected ROI and timeline for {{project_type}} in {{sector}}.",
              variables: ["project_type", "sector"],
            },
            {
              id: "ai-readiness",
              name: "AI Readiness Evaluation",
              description: "Assess organizational readiness for AI adoption",
              template:
                "Evaluate the organization's readiness for AI adoption by examining: 1) Current technical capabilities, 2) Data quality and availability, 3) Staff expertise and training needs, 4) Change management requirements for {{organization_type}}.",
              variables: ["organization_type"],
            },
          ],
        },
        {
          id: "ai-innovation",
          name: "Innovation Assessment",
          description: "Evaluate innovative AI solutions and emerging technologies",
          category: "Strategic",
          color: "bg-purple-50 text-purple-700 border-purple-100",
          topics: ["Innovation", "Emerging Tech", "R&D"],
          tags: ["research", "development", "future-tech"],
          autoGeneratedTopics: ["Quantum Computing", "Edge AI", "Federated Learning"],
          autoGeneratedTags: ["cutting-edge", "experimental", "breakthrough"],
          promptTemplates: [
            {
              id: "innovation-eval",
              name: "Innovation Evaluation",
              description: "Assess innovative potential of AI solutions",
              template:
                "Evaluate the innovation potential by analyzing: 1) Novelty and uniqueness of the approach, 2) Market disruption potential, 3) Technical barriers and breakthrough requirements, 4) Competitive advantages for {{market_segment}}.",
              variables: ["market_segment"],
            },
          ],
        },
      ],
    },
    {
      id: "rail",
      name: "Rail Transport",
      description: "Railway infrastructure, operations, and modernization",
      color: "bg-green-100 text-green-800 border-green-200",
      useCases: [
        {
          id: "rail-infrastructure",
          name: "Infrastructure Planning",
          description: "Plan and assess railway infrastructure projects",
          category: "Operational",
          color: "bg-green-50 text-green-700 border-green-100",
          topics: ["Infrastructure", "Planning", "Engineering"],
          tags: ["construction", "maintenance", "upgrade"],
          autoGeneratedTopics: ["Electrification", "Signaling", "Track Geometry"],
          autoGeneratedTags: ["modernization", "capacity", "efficiency"],
          promptTemplates: [
            {
              id: "rail-infra-plan",
              name: "Infrastructure Planning",
              description: "Comprehensive railway infrastructure planning template",
              template:
                "Analyze the railway infrastructure project focusing on: 1) Technical specifications and engineering requirements, 2) Environmental impact and sustainability considerations, 3) Cost-benefit analysis and funding requirements, 4) Implementation timeline and phasing for {{route_type}} in {{region}}.",
              variables: ["route_type", "region"],
            },
          ],
        },
        {
          id: "rail-safety",
          name: "Safety & Compliance",
          description: "Railway safety protocols and regulatory compliance",
          category: "Assessment",
          color: "bg-red-50 text-red-700 border-red-100",
          topics: ["Safety", "Compliance", "Regulations"],
          tags: ["risk-management", "standards", "protocols"],
          autoGeneratedTopics: ["RAMS Analysis", "Safety Case", "Risk Assessment"],
          autoGeneratedTags: ["regulatory", "certification", "audit"],
          promptTemplates: [
            {
              id: "safety-assessment",
              name: "Safety Assessment",
              description: "Railway safety evaluation template",
              template:
                "Evaluate safety aspects by examining: 1) Risk identification and assessment, 2) Safety measures and controls, 3) Regulatory compliance status, 4) Emergency procedures and contingency plans for {{system_type}}.",
              variables: ["system_type"],
            },
          ],
        },
      ],
    },
    {
      id: "highway",
      name: "Highway & Roads",
      description: "Road infrastructure, traffic management, and highway systems",
      color: "bg-orange-100 text-orange-800 border-orange-200",
      useCases: [
        {
          id: "traffic-management",
          name: "Traffic Management",
          description: "Optimize traffic flow and management systems",
          category: "Operational",
          color: "bg-orange-50 text-orange-700 border-orange-100",
          topics: ["Traffic Flow", "ITS", "Smart Roads"],
          tags: ["optimization", "congestion", "efficiency"],
          autoGeneratedTopics: ["Dynamic Routing", "Traffic Signals", "Variable Message Signs"],
          autoGeneratedTags: ["real-time", "adaptive", "intelligent"],
          promptTemplates: [
            {
              id: "traffic-optimization",
              name: "Traffic Optimization",
              description: "Traffic management optimization template",
              template:
                "Analyze traffic management solutions by evaluating: 1) Current traffic patterns and bottlenecks, 2) Proposed optimization strategies, 3) Technology requirements and integration, 4) Expected improvements in {{metric_type}} for {{area_type}}.",
              variables: ["metric_type", "area_type"],
            },
          ],
        },
      ],
    },
    {
      id: "maritime",
      name: "Maritime Transport",
      description: "Ports, shipping, and maritime infrastructure",
      color: "bg-cyan-100 text-cyan-800 border-cyan-200",
      useCases: [
        {
          id: "port-operations",
          name: "Port Operations",
          description: "Optimize port operations and logistics",
          category: "Operational",
          color: "bg-cyan-50 text-cyan-700 border-cyan-100",
          topics: ["Port Management", "Logistics", "Cargo Handling"],
          tags: ["efficiency", "automation", "throughput"],
          autoGeneratedTopics: ["Container Terminal", "Berth Allocation", "Yard Management"],
          autoGeneratedTags: ["optimization", "digitalization", "performance"],
          promptTemplates: [
            {
              id: "port-efficiency",
              name: "Port Efficiency Analysis",
              description: "Port operations efficiency evaluation template",
              template:
                "Evaluate port operations by analyzing: 1) Current operational efficiency metrics, 2) Bottlenecks and improvement opportunities, 3) Technology integration potential, 4) Resource optimization strategies for {{port_type}} handling {{cargo_type}}.",
              variables: ["port_type", "cargo_type"],
            },
          ],
        },
      ],
    },
  ])

  const [editingUseCase, setEditingUseCase] = useState<{ domainId: string; useCase: UseCase } | null>(null)
  const [editingTemplate, setEditingTemplate] = useState<{
    domainId: string
    useCaseId: string
    template: PromptTemplate
  } | null>(null)

  const renderPromptTemplate = (domainId: string, useCaseId: string, template: PromptTemplate, level = 3) => {
    const sectionId = `${domainId}-${useCaseId}-${template.id}`
    const isExpanded = expandedSections.has(sectionId)
    const indentClass = level === 3 ? "ml-16" : "ml-20"

    return (
      <div key={template.id} className={`${indentClass} border-l-2 border-muted pl-4`}>
        <Card className="mb-2">
          <CardHeader className="py-3 cursor-pointer" onClick={() => onToggleSection(sectionId)}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                <MessageSquare className="h-4 w-4 text-muted-foreground" />
                <span className="font-medium text-sm">{template.name}</span>
                <Badge variant="outline" className="text-xs">
                  Template
                </Badge>
              </div>
              <div className="flex items-center gap-1">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={(e) => {
                    e.stopPropagation()
                    setEditingTemplate({ domainId, useCaseId, template })
                  }}
                >
                  <Edit className="h-3 w-3" />
                </Button>
                <Button variant="ghost" size="icon" className="h-6 w-6 text-destructive">
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </CardHeader>
          {isExpanded && (
            <CardContent className="pt-0 space-y-3">
              <p className="text-sm text-muted-foreground">{template.description}</p>
              <div className="bg-muted p-3 rounded-md">
                <p className="text-xs font-mono whitespace-pre-wrap">{template.template}</p>
              </div>
              {template.variables.length > 0 && (
                <div>
                  <span className="text-xs font-medium">Variables:</span>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {template.variables.map((variable) => (
                      <Badge key={variable} variant="outline" className="text-xs">
                        {variable}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          )}
        </Card>
      </div>
    )
  }

  const renderUseCase = (domainId: string, useCase: UseCase, level = 2) => {
    const sectionId = `${domainId}-${useCase.id}`
    const isExpanded = expandedSections.has(sectionId)
    const indentClass = level === 2 ? "ml-8" : "ml-12"

    return (
      <div key={useCase.id} className={`${indentClass} border-l-2 border-muted pl-4`}>
        <Card className="mb-3">
          <CardHeader className="py-4 cursor-pointer" onClick={() => onToggleSection(sectionId)}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                <FileText className="h-4 w-4 text-muted-foreground" />
                <div>
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{useCase.name}</span>
                    <Badge className={useCase.color}>{useCase.category}</Badge>
                  </div>
                  <p className="text-sm text-muted-foreground mt-1">{useCase.description}</p>
                </div>
              </div>
              <div className="flex items-center gap-1">
                <Badge variant="secondary" className="text-xs">
                  {useCase.promptTemplates.length} Templates
                </Badge>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={(e) => {
                    e.stopPropagation()
                    setEditingUseCase({ domainId, useCase })
                  }}
                >
                  <Edit className="h-3 w-3" />
                </Button>
                <Button variant="ghost" size="icon" className="h-7 w-7 text-destructive">
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </CardHeader>
          {isExpanded && (
            <CardContent className="space-y-4">
              {/* Topics and Tags */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Tag className="h-4 w-4" />
                    <span className="text-sm font-medium">Manual Topics</span>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {useCase.topics.map((topic) => (
                      <Badge key={topic} variant="secondary" className="text-xs">
                        {topic}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Sparkles className="h-4 w-4" />
                    <span className="text-sm font-medium">AI-Generated Topics</span>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {useCase.autoGeneratedTopics.map((topic) => (
                      <Badge key={topic} variant="outline" className="text-xs border-dashed">
                        {topic}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Tag className="h-4 w-4" />
                    <span className="text-sm font-medium">Manual Tags</span>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {useCase.tags.map((tag) => (
                      <Badge key={tag} variant="secondary" className="text-xs">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Sparkles className="h-4 w-4" />
                    <span className="text-sm font-medium">AI-Generated Tags</span>
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {useCase.autoGeneratedTags.map((tag) => (
                      <Badge key={tag} variant="outline" className="text-xs border-dashed">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>

              <Separator />

              {/* Prompt Templates */}
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-medium flex items-center gap-2">
                    <MessageSquare className="h-4 w-4" />
                    Prompt Templates ({useCase.promptTemplates.length})
                  </h4>
                  <Button variant="outline" size="sm">
                    <Plus className="mr-1 h-3 w-3" />
                    Add Template
                  </Button>
                </div>
                {useCase.promptTemplates.map((template) => renderPromptTemplate(domainId, useCase.id, template))}
              </div>
            </CardContent>
          )}
        </Card>
      </div>
    )
  }

  const renderDomain = (domain: Domain) => {
    const sectionId = domain.id
    const isExpanded = expandedSections.has(sectionId)

    return (
      <Card key={domain.id} className="mb-4">
        <CardHeader className="cursor-pointer" onClick={() => onToggleSection(sectionId)}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              {isExpanded ? <ChevronDown className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
              <Globe className="h-5 w-5 text-muted-foreground" />
              <div>
                <div className="flex items-center gap-2">
                  <span className="text-lg font-semibold">{domain.name}</span>
                  <Badge className={domain.color}>Domain</Badge>
                </div>
                <p className="text-sm text-muted-foreground mt-1">{domain.description}</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="secondary">{domain.useCases.length} Use Cases</Badge>
              <Badge variant="outline">
                {domain.useCases.reduce((acc, uc) => acc + uc.promptTemplates.length, 0)} Templates
              </Badge>
              <Button variant="ghost" size="icon">
                <Edit className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="icon" className="text-destructive">
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
        {isExpanded && (
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="font-medium flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Use Cases ({domain.useCases.length})
              </h3>
              <Button variant="outline" size="sm">
                <Plus className="mr-1 h-3 w-3" />
                Add Use Case
              </Button>
            </div>
            {domain.useCases.map((useCase) => renderUseCase(domain.id, useCase))}
          </CardContent>
        )}
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {domains.map(renderDomain)}

      {/* Edit Dialogs */}
      {editingUseCase && (
        <UseCaseEditor
          domainId={editingUseCase.domainId}
          useCase={editingUseCase.useCase}
          onClose={() => setEditingUseCase(null)}
          onSave={(updatedUseCase) => {
            // Update use case logic here
            setEditingUseCase(null)
          }}
        />
      )}

      {editingTemplate && (
        <PromptTemplateEditor
          domainId={editingTemplate.domainId}
          useCaseId={editingTemplate.useCaseId}
          template={editingTemplate.template}
          onClose={() => setEditingTemplate(null)}
          onSave={(updatedTemplate) => {
            // Update template logic here
            setEditingTemplate(null)
          }}
        />
      )}
    </div>
  )
}
